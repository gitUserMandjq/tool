package com.example.tool.common.utils;

public class MeasuresUtils {
    public static void main(String[] args) {
        Double[] d1 = {};
        Double[] d2 = {};
        {
            //第一种：合并数组计算方差，不按增量算法
            Double[] d3 = hebing(d1,d2);
            Measures m1 = createMs(d3);
            System.out.println("传统计算结果："+m1.getVariance());
        }
        {
            //第二种：方差增量算法
            Measures m2 = createMs(d1);
            Measures m3 = createMs(d2);
            Measures m4 = m2.appendDelta(m3);
            System.out.println("增量算法结果："+m4.getVariance());
        }
        {
            //第二种：方差增量算法,一个一个加
            Measures m2 = createMs(d1);
            for(Double d:d2){
                m2.appendDelta(d);
            }
            System.out.println("增量算法结果："+m2.getVariance());
            System.out.println(Math.pow(Math.sqrt(m2.getVariance()), 2));
        }
    }
    public static class Measures {
        private Integer n;//数组元素个数
        private Double sum;//数组中各元素之和
        private Double variance;//数组方差
        private Double avg;//数组的平均值
        //有参构造器
        public Measures(Integer n, Double sum, Double variance) {
            this.n = n;
            this.sum = sum;
            this.variance = variance;
            if(n == 0){
                this.avg = 0.0;
            }else{
                this.avg =sum/n;
            }
        }
        //数组增量方法
        public Measures appendDelta(Measures delta){
            Integer newN = this.n + delta.getN();//数组长度之和
            Double newSum = this.sum + delta.getSum();//数组元素总和
            Double newAvg = newSum / newN;
            Double variance = (this.partial(newAvg,this.avg,this.variance,this.n) + this.partial(newAvg,delta.getAvg(),delta.getVariance(),delta.getN()))/newN;//方差增量算法公式
            return new Measures(newN,newSum,variance);
        }
        //数组增量方法
        public Measures appendDelta(Double num){
            Integer newN = this.n + 1;//数组长度之和
            Double newSum = this.sum + num;//数组元素总和
            Double newAvg = newSum / newN;
            Double variance = (this.partial(newAvg,this.avg,this.variance,this.n) + this.partial(newAvg,num,0.0,1))/newN;//方差增量算法公式
            this.n = newN;
            this.sum = newSum;
            this.variance = variance;
            this.avg = newAvg;
            System.out.println(newSum + ":" + variance);
            return this;
        }
        // 封装表达式 n*(variance + (newAvg - avg)*(newAvg - avg))
        public Double partial(Double newAvg ,Double avg ,Double variance,Integer n){
            Double deltaAvg =newAvg - avg;
            return n * ( variance + deltaAvg * deltaAvg );
        }

        public Integer getN() {
            return n;
        }

        public void setN(Integer n) {
            this.n = n;
        }

        public Double getSum() {
            return sum;
        }

        public void setSum(Double sum) {
            this.sum = sum;
        }

        public Double getVariance() {
            return variance;
        }

        public void setVariance(Double variance) {
            this.variance = variance;
        }

        public Double getAvg() {
            return avg;
        }

        public void setAvg(Double avg) {
            this.avg = avg;
        }
    }
    /**
     * 单个数组方差的计算
     * @return
     */
    public static Measures createMs(Double[] values){
        Measures ms = null;
        if (values != null && values.length > 0){
            Integer n = values.length;
            //求和
            Double sum =0.00;
            //avg
            Double avg = 0.00;
            //方差计算
            Double variance = 0.00;
            Double sumSq = 0.00;
            for (int i = 0;i<values.length;i++){
                sum +=values[i];
            }
            avg = sum/n;
            for (int i = 0;i<values.length;i++){
                sumSq += Math.pow((values[i] - avg),2);
            }
            variance = sumSq / n;
            ms = new Measures(n,sum,variance);
        }else{
            ms = new Measures(0,0.00,0.00);
        }

        return ms;
    }


    public static  Double[] hebing(Double[] d1,Double[] d2){
        if(d1 == null){
            d1 = new Double[0];
        }
        if(d2 == null){
            d2 = new Double[0];
        }
        Double[] d3 = new Double[d1.length+d2.length];
        for (int i =0;i <d1.length; i++){
            d3[i] = d1[i];
        }
        for(int i =0;i <d2.length; i++){
            d3[i+d1.length] = d2[i];
        }
        return d3;
    }
}
